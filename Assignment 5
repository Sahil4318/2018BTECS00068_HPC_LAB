#include<mpi.h>
#include <stdio.h>

int main() {
	
	int first = 1,second = 2 ,third = 3,fourth = 4;
	
	MPI_Init(NULL,NULL);
	
	int rank,size;
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	MPI_Comm_rank(MPI_COMM_WORLD,&rank);
	
	if(rank == 0) 
		MPI_Send(&first,1,MPI_INT,1,0,MPI_COMM_WORLD);
	
	if(rank == 1) {

		MPI_Recv(&first,1,MPI_INT,0,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		
		printf("process rank-  %d , data received %d \n",rank,first);
		
		MPI_Send(&second,1,MPI_INT,2,12,MPI_COMM_WORLD);
	}
	
	if(rank == 2) {
		MPI_Recv(&second,1,MPI_INT,1,12,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		
		printf("process rank-  %d , data received %d \n",rank,second);
		MPI_Send(&third,1,MPI_INT,3,13,MPI_COMM_WORLD);
	}
	
	if(rank == 3) {
		MPI_Recv(&third,1,MPI_INT,2,13,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		
		printf("process rank-  %d , data received %d \n",rank,third);
		
		MPI_Send(&fourth,1,MPI_INT,0,14,MPI_COMM_WORLD);
	}
	
	if(rank == 0) {
		MPI_Recv(&fourth,1,MPI_INT,3,14,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
		
		printf("process rank-  %d , data received %d \n",rank,fourth);
	}
	
	MPI_Finalize();
	
}












#include<stdio.h>
#include<mpi.h>


int main() {

		MPI_Init(NULL,NULL);

    int rank,size;
    MPI_Comm_rank(MPI_COMM_WORLD,&rank);
    MPI_Comm_size(MPI_COMM_WORLD,&size);
    
    MPI_Request send_request,recv_request;
    MPI_Status status;
    
    int curr_process = rank % size;
		int next_process = (rank+1) % size;
		
		int num = 0;
		MPI_Isend(&num,1,MPI_INT,curr_process,0,MPI_COMM_WORLD,&send_request);
		printf("sender_process: %d sender_data: %d \n",curr_process,num);

		int k;
		MPI_Irecv(&k,1,MPI_INT,next_process,0,MPI_COMM_WORLD,&recv_request);
		printf("receiver_process: %d received_data: %d \n",next_process,k);
		  	
	  MPI_Finalize();
	  return 0;

}    









#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h>
 
int main(int argc, char* argv[])
{ 
 int np, pid; 
 MPI_Init(&argc, &argv); 
 MPI_Comm_rank(MPI_COMM_WORLD, &pid); 
 MPI_Comm_size(MPI_COMM_WORLD, &np); 
 int partial_sum = 0; 
 if (pid == 0) 
 { 
	int a[] = { 1, 2, 3, 4, 5}; 
	for(int i = 0; i < 5; i++) 
		partial_sum += a[i]; 
 }
 else if (pid == 1)
 { 
	int a[] = {6, 7, 8, 9, 10}; 
	for(int i = 0; i < 5; i++) 
	partial_sum += a[i]; 
 }  
 int sum; 
 MPI_Reduce(&partial_sum, &sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD); 
 if (pid == 0)
 {
 	printf("Sum of array is : %d\n", sum); 
 } 
 MPI_Finalize(); 
 return 0; 
}
