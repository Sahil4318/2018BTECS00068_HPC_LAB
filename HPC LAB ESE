Q1>Implement Bubble sort using openmp
#include <omp.h>
#include <stdio.h>
#include<stdlib.h>

void bubble(int * , int);
void swap(int * , int *);

void bubble(int *a ,int n)
{
	for(int i=0;i<n;i++)
	{
		int first=i%2;
		#pragma opm parallel for shared(a,first)
		for(int j=first;j<n-1;j=j+2)
		{
			if(a[j]>a[j+1])
			{
				swap(&a[j],&a[j+1]);
			}
		}
	}
}
void bb(int *a ,int n)
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n-i-1;j++)
		{
			if(a[j]>a[j+1])
			{
				swap(&a[j],&a[j+1]);
			}			
		}
	}
}
void swap(int *x,int *y)
{
	int temp;
	temp=*(x);
	*(x)=*(y);
	*(y)=temp;
}
 int main()
 {
 	int x[]={2,3,1,4,0};
 	bubble(x,5);
 	//bb(x,5);
 	for(int i=0;i<5;i++)
 	{
 		printf("%d",x[i]);	
	}
 }
 
 
 
 
 
 
 Q2>Implement MPI program using all to all Broadcast
 #include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
int main(int argc, char* argv[]) {
	if (argc != 2) {
		printf("Usage : alltoall message_size\n");
		return 1;
	}
	int rank;
	int num_procs;
	int size = atoi(argv[1]);
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &num_procs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	int i;
	char * input_buffer = (char *)malloc(size * num_procs);
	char * recv_buffer = (char *)malloc(size * num_procs);
	srand(time(NULL));
	for (i = 0; i < size; i++)
		input_buffer[i] = rand() % 256;
	int j;
	for (j = 1; j < num_procs; j++) {
		int k = 0;
		for (i = j * size; i < j * size + size; i++) {
			input_buffer[i] = input_buffer[k];
			k++;
		}
	}
	double total_time = 0.0;
	double start_time = 0.0;
	for (i = 0; i < 100; i++) {
		MPI_Barrier(MPI_COMM_WORLD);
		start_time = MPI_Wtime();

		MPI_Alltoall(input_buffer, size, MPI_CHAR, recv_buffer, size, MPI_CHAR, MPI_COMM_WORLD);
		MPI_Barrier(MPI_COMM_WORLD);
		total_time += (MPI_Wtime() - start_time);
	}
	if (rank == 0) {
		printf("Average time for alltoall : %f secs\n", total_time / 100);
	}
	MPI_Finalize();
}






Q3>Write an CUDA Programming to print full pyramid using *

%%cu
#include<stdio.h>
#include<cuda.h>
__global__ void mataprint(int *d)
{
  int id=blockIdx.x;
  printf("*");
}
int main()
{
    int n=5;
    int i,j;
    int *d;
    cudaMemcpy(d,&n,sizeof(int),cudaMemcpyHostToDevice); 
    for(int i=0;i<n;i++)
    {
        mataprint<<<i,1>>>(d);
        printf("\n");
    }
    cudaMemcpy(&n,d,sizeof(int),cudaMemcpyDeviceToHost);
    return 0;
}

 
 
 
 
